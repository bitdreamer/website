TimeBug 
design

Mission -- these are the general categories of things that I know I want to
      do, sleep, work, to music.  This forms the budget, against which the
	  tasks and 
   category - there are 7 of these so far.  like basics, school, expression-time
   subcat - more specific, like sleep, class and trumpet
   mishID - ID, key with personID
   importance - 0 to 10, 10 is a must.  
   frac - fraction of your time you plan to spend on this.
   aim - 0 means aim for this amount, -1 means go less if possible, +1 means go more.
   personID - let's make it so multiple people can use this.
   mishOrder - order to put mission items in, from low to high
   usuallyat - suggested location for this mission.  Some are set, some aren't.

Task -- These are specific things to do.  eg. prep a particular class, or 
      reading an article.  We need to make provisions for recurring tasks.
   personID - applies to this person
   taskID - ID, key with personID
   description - what you have to do. this is really just the title of the task.
   duration - how long we expect it to take, in hours.  for recurring tasks,
      this is for ONE time.  
   recurs - 0 for one-time event, if recurring give the interval in days
   mishID - this task fulfills some part of this mission
   earliest - soonest date this can be done
   latest - deadline (note, for tasks leading to recurring bookings, these are the
      start and end dates of the series.)
   mustdo - -1 means just use importance of associated Mission, else this is 0-10. 
   tstatus - 0 not done, 1 done, 2 booked.
   tied - was created automatically from a booking.
   details - more about the task.
   
   // suggested additions ....
   durFlex - how much (in hours) the duration of this event can be varied.  
   whenFlex - how much the start+end times can vary.  0-24.
   daySug -  day of the week
   dayFlex - How much we can change the day of the week, in days
   
proposed ...
Munth - measurement period, over which we can calculate adherence to budget.
      Think "month" but might not be.
   personID -
   startDate -
   endDate -
   hours - how long is this period in hours
   
proposed ...
MunthCatSum - 
   personID -
   category -
   subcat - 
   sum - sum of hours of tasks in this 'month' for this category+subcat
   eval - ratio of sum / (hours * mission.frac)
   

Booking -- this is a specific event/activity tagged to time on calendar.
       We can make code that creates multiple bookings in a shot, but I don't
	   think we need multiplicity within the Booking structure.  Sets of related
	   Bookings will have a common Task, and we can address them jointly through
	   that if needed.
   personID - 
   taskID - this Booking is to complete some task
   bookingID - ID, key with personID
   startDate - date format
   startTime - lets do this is hours as a float
   endDate - we may not use this much
   endTime - hours as float
   status - 0=no information, 1=time spent on task and task got done, 2=time spent on 
      task but this did NOT get the task done
      3=time spent some other way
      (not sure we need 3, could just erase the thing if it's not what it says it is ... )
	  4 - delete.  Obviously this record won't have this value if it's deleted, but 
	  in the case that we implement it in stages, this is "to be deleted".  
   location - where this event is occurring.  


Note: to get into the DB, you can make the database TimeBug and the user TimeBugUser in phpMyAdmin.
To grant that the latter can get in the former, go to teminal input as root,
open mysql, and do
   use TimeBug;
   grant all on * to TimeBugUser identified by 'wefwef'; // where wefwef is your password
The start refers to all tables.  You can say "privileges" after "all".  

Current edits ....
   As for Task completion, usually we like to mark a Booking done in order to complete a task.  
   It would be nice however if we had a way of quickly making a Booking and then
   marking it done.  I want to be able to mark a task done, but I also want it to
   show up in budget statistics, and that will never happen if we don't give it a
   Booking.
   Maybe that should just come with the auto-booking, where we pick a task and
   then TimeBug generates a Booking for it.   This probably isn't that hard ... we
   have it send us to the BookingEdit page, and just make sure that we don't auto-generate
   a task for one that already comes from a task.